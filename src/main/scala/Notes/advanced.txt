check out the use of companion:
e.g.:
    - pattern
    - object vs class relationship

Regex:
    Regular expressions are strings which can be used to find patterns (or lack thereof) in data.
    Any string can be converted to a regular expression using the .r method.

import scala.util.matching.Regex
val numberPattern: Regex = "[0-9]".r
numberPattern.findFirstMatchIn("awesomepassword") match {
  case Some(_) => println("Password OK")
  case None => println("Password must contain a number")
}

Implicit type is quite interesting, check implicit package
Polymorphic methods to take in parameters with different types

Variance: ???
new concept

http://docs.scala-lang.org/tutorials/tour/operators.html
Operators can be defined and are considered as method

by-name parameters:
They are in contrast to by-value parameters.
To make a parameter called by-name, simply prepend => to its type.
def calculate(input: => Int) = input * 37
By-name parameters have the the advantage that they are not evaluated
if they aren’t used in the function body.
On the other hand, by-value parameters have the advantage that they are evaluated only once.

Inner classes:
class Graph {
  class Node {
    var connectedNodes: List[Node] = Nil
    def connectTo(node: Node) {
      if (connectedNodes.find(node.equals).isEmpty) {
        connectedNodes = node :: connectedNodes
      }
    }
  }
  var nodes: List[Node] = Nil
  def newNode: Node = {
    val res = new Node
    nodes = res :: nodes
    res
  }
}

val graph1: Graph = new Graph
val node1: graph1.Node = graph1.newNode
val node2: graph1.Node = graph1.newNode
node1.connectTo(node2)      // legal
val graph2: Graph = new Graph
val node3: graph2.Node = graph2.newNode
node1.connectTo(node3)      // illegal!


Compound Types:
The question arises what the type of the parameter obj is.
If it’s Cloneable then the object can be cloned, but not reset;
if it’s Resetable we can reset it, but there is no clone operation.
To avoid type casts in such a situation,
we can specify the type of obj to be both Cloneable and Resetable.
This compound type is written like this in Scala: Cloneable with Resetable.

Here’s the updated function:
def cloneAndReset(obj: Cloneable with Resetable): Cloneable = {
  //...
}
Compound types can consist of several object types and
they may have a single refinement
which can be used to narrow the signature of existing object members.
The general form is: A with B with C ... { refinement }
